import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fluttertoast/fluttertoast.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: const Login(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String name;
  const MyHomePage({super.key, required this.name});

  @override
  // ignore: library_private_types_in_public_api, no_logic_in_create_state
  _MyHomePageState createState() => _MyHomePageState(name);
}

class _MyHomePageState extends State<MyHomePage> {
  String name = "";
  _MyHomePageState(this.name);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text("Home"),
      ),
      body: Center(
        child: Text("Hola! $name", style: const TextStyle(fontSize: 30),)
      )
      // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}


class Login extends StatefulWidget {
  const Login({Key? key}) : super(key: key);

  @override
  State<Login> createState() => _LoginState();
}

class _LoginState extends State<Login> {

  final _formKey = GlobalKey<FormState>();
  final _email = TextEditingController();
  final _password = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text("Login"),),
        body: Padding(
          padding: const EdgeInsets.all(6.0),
          child: Form(
            key: _formKey,
            child: Column(  
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(100),
                  child: Image.asset('images/login.jpg',width: 200, height: 200,),
                ),
                const SizedBox(height: 10.0,),
                TextFormField(
                  keyboardType: TextInputType.emailAddress,
                  controller: _email,
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Email";
                    }
                    return null;
                  },
                  decoration: const InputDecoration(
                      labelText: "Email",
                      border: OutlineInputBorder()
                  ),
                ),
                const SizedBox(height: 6.0,),
                TextFormField(
                  obscureText: true,
                  controller: _password,
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Password";
                    }
                    return null;
                  },
                  decoration: const InputDecoration(
                      labelText: "Password",
                      border: OutlineInputBorder()
                  ),
                ),
                SizedBox(width: 100,child: ElevatedButton(onPressed: (){
                  if(_formKey.currentState!.validate()){
                    login(_email.text,_password.text,context);
                  }
                }, child: const Text("Login"))),
                const SizedBox(height: 6.0,),
                GestureDetector(onTap: (){
                  Navigator.push(context,MaterialPageRoute(builder: (context)=> const SignUp()));
                },child: const Text("Click here to Register",style: TextStyle(color: Color.fromARGB(255, 11, 59, 13), fontSize: 16), ))
              ],
            ),
          ),
        )
    );
  }

  void login(String email,String password,BuildContext context) async {
    var prefs = await SharedPreferences.getInstance();
    if(prefs.containsKey(email)){
      var details = prefs.getStringList(email)!;
      if(details[2] == password){
        // ignore: use_build_context_synchronously
        Navigator.pushReplacement(context, MaterialPageRoute(builder: (context)=>MyHomePage(name:details[0])));
      }
      else{
        Fluttertoast.showToast(
            msg: "Incorrect Password",
            toastLength: Toast.LENGTH_SHORT,

            timeInSecForIosWeb: 1,
            backgroundColor: Colors.red,
            textColor: Colors.white,
            fontSize: 16.0
        );
      }
    }
    else{
      Fluttertoast.showToast(
          msg: "User doesn't exist",
          toastLength: Toast.LENGTH_SHORT,

          timeInSecForIosWeb: 1,
          backgroundColor: Colors.red,
          textColor: Colors.white,
          fontSize: 16.0
      );
    }

  }
}



class SignUp extends StatefulWidget {
  const SignUp({Key? key}) : super(key: key);

  @override
  State<SignUp> createState() => _SignUpState();
}

class _SignUpState extends State<SignUp> {

  final _formkey = GlobalKey<FormState>();
  final _email = TextEditingController();
  final _password = TextEditingController();
  final _name = TextEditingController();
  final _phone = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text("Sign Up"),),
        body: Padding(
          padding: const EdgeInsets.all(6.0),
          child: Form(
            key: _formkey,
            child: Column(
              children: [
                TextFormField(
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Name";
                    }
                    return null;
                  },
                  controller: _name,
                  decoration: const InputDecoration(
                      labelText: "Name",
                      border: OutlineInputBorder()
                  ),
                ),
                const SizedBox(height: 6.0,),
                TextFormField(
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Email";
                    }
                    return null;
                  },
                  keyboardType: TextInputType.emailAddress,
                  controller: _email,
                  decoration: const InputDecoration(
                      labelText: "Email",
                      border: OutlineInputBorder()
                  ),
                ),
                const SizedBox(height: 6.0,),
                TextFormField(
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Password";
                    }
                    return null;
                  },
                  controller: _password,
                  obscureText: true,
                  decoration: const InputDecoration(
                      labelText: "Password",
                      border: OutlineInputBorder()
                  ),
                ),
                const SizedBox(height: 6.0,),
                TextFormField(
                  validator: (value){
                    if(value == null || value.isEmpty){
                      return "Please enter Phone Number";
                    }
                    else if(value.length != 10){
                      return "Invalid Phone Number Format";
                    }
                    return null;
                  },
                  controller: _phone,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                      labelText: "Phone",
                      border: OutlineInputBorder()
                  ),
                ),
                SizedBox(width: double.infinity,child: ElevatedButton(onPressed: (){
                  if(_formkey.currentState!.validate()){
                    signUp(_name.text,_email.text,_password.text,_phone.text);
                  }
                }, child: const Text("Sign Up"))),

              ],
            ),
          ),
        )
    );
  }

  void signUp(String name,String email,String password, String phone) async{
    var prefs = await SharedPreferences.getInstance();
    prefs.setStringList(email, [name,email,password,phone]);
  }
}
